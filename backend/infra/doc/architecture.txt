1. Components
 Web App : Client app for web browsers
 Android App : Client app for android devices
 Read Api : Server app for data retrieval by client apps
 Write Api : Server app for data creation/updates by client apps
 Load-balancer : Proxy to load-balance traffic between available instances of read/write api
 Memory Cache : Fast cache based on memory used to minimize access to db
 Admin App & Admin Api : Client-Server app for data administration
 Backend : Scripts to collect coupons, fix coupons status, subscribe users to alerts ...
 Database : Relation database

2. Web App

 2.1 Technology
  Based on React JS and Material-UI.
  Uses Service Worker and Firebase Cloud Messaging for push notifications.
  Uses IndexDB as local cache via a library called localForage.
  Uses a library called MiniSearch, a high performance indexed search for javascript.

 2.2 Scalability
  Static files generated by react build are hosted
  in S3 bucket accelerated with Amazon Cloudfront.

 2.3 High Availability
  Cloudfront assures high availability for static assets.
  Google fonts servers ensures high availability for font files.
  Usage of 2 or more load balancers in a try-next-if-current-fails
  way ensures high availability of API endpoints

 2.4 Performance
  Autocomplete search is done locally using MiniSearch.
  Reason is to avoid hitting servers for a content that rarely changes
  which is the list of available stores. That list is downloaded
  from Cloudfront on app startup.
  Using React JS assures high speed UI updates, since it only updates
  relevant parts of the DOM.
  When a store is fetched, it is stored in a local cache
  for several minutes to avoid hitting the server too frequently
  for a content that will not change frequently in the same day.
  List of latest coupons is also cached locally for several minutes.

 2.5 Responsive Design
  The UI is designed to fit perfectly on large, medium and small screens.
  Material-UI responsiveness capabilities have been leveraged to achieve this.

 2.6 Analytics
  App+Web property is used to track both this web app and the android app.
  Firebase analytics is used throughout the app to track these events :
    -store_view (store_name)
    -store_fave (store_name)
    -store_unfave (store_name)
    -coupon_view (coupon_id,coupon_name,store_name)
    -coupon_save (coupon_id,coupon_name,store_name)
    -push_subscribe
    -push_unsubscribe
    -push_subscribe_err
  Measurement Protocol is used in the service worker to track these events :
    -notification_receive
    -notification_open
  Useful reports to be created like : Top stores, Notification receive by platform ...

 2.7 Push Notifications
  Push notifications are alerts about new coupons or store promotions
  recently added. When user subscribes to push notification, he will
  receive alerts related to stores that he marked as favorite.
  The goal of using push notifications is to get back dormant users.
  Push notifications are displayed in the browser even if our web app is not opened.
  User can subscribe to push notifications from the main menu.
  If user adds a favorite store and he is not subscribed, a snackbar
  is displayed asking him if he wants to subscribe.
  The standard browser dialog asking user if he wants to receive alerts from us
  is only shown when user explicitly asks to receive coupon alerts by turning
  the relevant option on the main menu or in the popup message.
  User can disable notification at anytime by going the main menu and switching off the relevant option.
  To avoid overwhelming user with stacked notifications, old notifications are either
  deleted or merged with new ones.

 2.8 SEO
  A react module called Helmet is used to update the page metadata
  when the content is updated.
  ld+json is used to describe content as structured data.
  Each coupon comes with a unique random description.
  Each store can have one or more content blocks that can improve SEO.

 2.9 Promotion of other assets
  When a user is detected using android, it will be prompted with a non-intrusive
  banner asking him if he wants to use our android app.
  A link to the android app is also available in the main menu.
  When a store is displayed on a small screen and user is detected using android,
  a small button is available called "use in-app" allowing user to download our app.
  When the browser extension is ready, link to it.

3. Android App

4. Read Api, Write Api

  4.1 Technology
   Node JS with Express JS is used as an application server.

  4.2 Scalability
   No auto-scaling in place.
   More machines can be launched from the AMI of the api when needed.

  4.3 High Availability
   4 instances run on 2 machines, 2 per machine.
   HA is assured by load balancers which balance traffic in round-robin
   mode between the different instances.

  4.4 Monitoring
   Cloudwatch monitors general metrics of the machines.
   The script used by the load balancer to do health check
   on the registered api instances, will push an event to aws SNS topic
   created for infra issues, if app is detected to be down
   after having been up or up after having been down.
   SNS will send a mail to sysadmin in that case.

  4.5 Performance
   A memory cache is first used to respond to requests such as "get store".
   Only if the entry does not exist, it will be fetched from db.
   The server health check script will use nmap to check if the api port is open
   or not. This will result in at most 3 tcp packets exchanged (1 syn, 1 syn-ack, 1 rst)
   This prevents opening full connections, consuming quota of maximum parallel connections
   and leaving a bunch of temporarily unusable TIME_WAIT sockets behind.

5. Load-balancer

  5.1 Technology
   Based on HAProxy, a powerful and fast reverse proxy
   with a small memory footprint and very useful capabilities
   such as load balancing, basic caching, ssl termination ...

  5.2 Scalability
   No auto-scaling in place.
   One HAProxy instance is able to handle thousands of concurrent connections.
   Use the corresponding AMI to launch more instances.

  5.3 High Availability
   2 instances are in place so that if one fails the second is there to handle connections.
   If the 2 instances are up, client apps will randomly chose one of them and use it.

  5.4 SSL Termination
   The load-balancer handles the SSL handshake with clients and communicates
   with api servers through http.

  5.5 Caching
   Basic caching can be done by HAProxy. This is used to cache store pages for a few minutes.
   This allows clients to get cached results very fast and avoids hitting api servers too often.

  5.6 Health Check
   Availability of the load-balancers is checked periodically using the same script
   used by the load-balancer to check api servers availability.
   The script will be run on the Backend machine